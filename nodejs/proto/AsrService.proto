syntax = "proto3";

import "base.proto";

package Speechpro.Cloud.ASR;


/**
* Сервис распознавания речи
*/
service SpeechRecognition
{
	// Получить список доступных моделей для распознавания речи
	// Получить количество запущенных сессий по конкретной модели
	rpc GetListOfSpeechRecognitionModels(Auth) returns (ListOfModels);

	// Распознать речь.
	// Пользователь отправляет поток запросов на распознавание и получает поток результатов распознавания от сервиса
	rpc RecognizeSpeech(stream RecognizeRequest) returns (stream SpeechRecognitionResults);	
}

/**
* Пользовательский запрос на распознавание речи
* В рамках одной сессии распознавания пользователь должен отправить:
* - один запрос с конфигурацией
* - серию запросов с порциями звука для распознавания
* - один запрос на завершение распознавания
*/
message RecognizeRequest
{
	// Может быть одним из следующих запросов
	oneof recognize_request
	{
		// Запрос с конфигурацией, чтобы начать распознавание. 
		// Всегда нужно начинать распознавание с этого запроса!
		RecognitionConfig config = 1;

		// Очередная порция звука для распознавания.
		Sound sound = 2; 

		// Запрос на завершение распознавания и на получение последнего результата распознавания.
		Finish finish = 3;

	}
}

/**
* Настройки для старта сессии распознавания речи.
*/
message RecognitionConfig
{
	// Модель, по которой нужно распознавать. См. GetListOfSpeechRecognitionModels
	Model model = 1;
	
	/** Пользователь может пополнить словарь системы своими словами.
	* По умолчанию система распознает только те слова, которые есть в её словаре.
	* Внимание: использование additional_words замедляет распознавание.
	* Внимание: при использовании additional_words для каждого слова и словосочетания должны быть установлены транскрипции user_transcriptions.
	*/
	repeated string additional_words = 2;
	
	// Пользовательские транскрипции для additional_words
	repeated UserTranscriptions user_transcriptions = 3;

	Auth auth = 4;
}

message Auth {
	string client_id = 1;
	string domain_id = 2;
	string api_key = 3;
}

/**
* Пользовательские транскрипции
*/
message UserTranscriptions
{
	// Отдельное слово. Пример: "модельер"
	string word = 1;

	// Фонемная запись слова. Пример: "m a2 d y1 l' j e0 r".
	string transcription = 2;
}

/**
* Результаты распознавания речи
*/
message SpeechRecognitionResults
{
	// Список распознанных слов
	Text text = 1;

	// Мера уверенности (confidence) в распознанной фразе [0.0; 1.0]
	float phrase_confidence = 2;

	// Является ли результат фиксированным.
	// Фиксированный результат не будет меняться после передачи очередной порции звука, а все следующие результаты распознавания будут идти после него на временной оси.
	// Нефиксированный результат может измениться после передачи следующих порций звука. Может использоваться для отслеживания прогресса распознавания.
	// TODO: переименовать в is_fixed
	bool is_final = 3;
}


